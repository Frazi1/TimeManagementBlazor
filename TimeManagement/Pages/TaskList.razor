@page "/tasks"

@using Domain
@inherits OwningComponentBase

<h1>My tasks</h1>
<div>
    <div>
        <input type="text" @bind="@NewTask.Name" />
        <button @onclick="AddTask">Add Task</button>
    </div>
    <table>
        <thead>
        <tr>
            <th>Task</th>
            <th>Time spent</th>
            <th>Completed</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var task in AllTasks)
        {
            <tr>
                <td>@task.Name</td>
                <td>@task.TimeSpent</td>
                <td>
                    <input type="checkbox" @value="@task.IsCompleted"/>
               </td>
               <td>
                   <button @onclick="(() => DeleteTask(task))">Delete</button>
               </td>
            </tr>
        }
       </tbody>
    </table>
</div>

@code
{
    TaskDto NewTask = new TaskDto();
    List<TaskDto> AllTasks;

    private ITaskService TaskService => (ITaskService) ScopedServices.GetService(typeof(ITaskService));


    protected override async Task OnInitializedAsync()
    {
       AllTasks = await TaskService.GetAllTasksAsync();
    }

    private async Task AddTask()
    {
        NewTask.TimeSpent = TimeSpan.FromHours(new Random().Next(1,5));
        var createdTask = await TaskService.AddTask(NewTask);
        AllTasks.Add(createdTask);

        NewTask = new TaskDto();
    }

    private async Task DeleteTask(TaskDto task)
    {
        AllTasks.Remove(task);

        Console.WriteLine($"Delete task: {task.Id}");
        await TaskService.DeleteTask(task.Id);
    }

    private async Task UpdateTask(TaskDto task)
    {
        TaskDto updated = await TaskService.UpdateTask(task);
        int taskIndex = AllTasks.IndexOf(task);
        AllTasks[taskIndex] = updated;
    }
}