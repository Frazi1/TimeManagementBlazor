@using Domain
@inherits OwningComponentBase

<h1>My tasks</h1>
<div>
    <div>
        <input type="text" @bind="@NewTask.Name"/>
        <button @onclick="AddTask">Add Task</button>
    </div>
    @if (AllTasks == null)
    {
        <span>Loading...</span>
    }
    else
    {
        <table>
            <thead>
            <tr>
                <th>Task</th>
                <th>Time spent</th>
                <th>Completed</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var task in AllTasks.Items)
            {
                <tr>
                    <td>@task.Name</td>
                    <td>@task.TimeSpent</td>
                    <td>
                        <input type="checkbox" @value="@task.IsCompleted"/>
                    </td>
                    <td>
                        <button @onclick="(() => DeleteTask(task))">Delete</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
        <Pager Count="@AllTasks.AllItemsCount" PageSize="@_pageSize" OnPageChange="(async page => await OnPageChange(page))" />
    }
</div>

@code
{
    TaskDto NewTask = new TaskDto();
    private PagedList<TaskDto> AllTasks;
    private int _currentPage = 1;
    private int _pageSize = 5;
    

    private ITaskService TaskService => (ITaskService) ScopedServices.GetService(typeof(ITaskService));

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentPageTasks();
    }

    private Filter CreateFilter() => new Filter((_currentPage - 1) * _pageSize, _pageSize);
    private async Task LoadCurrentPageTasks() => AllTasks = await TaskService.GetTasksAsync(CreateFilter());

    private async Task AddTask()
    {
        NewTask.TimeSpent = TimeSpan.FromHours(new Random().Next(1, 5));
        var createdTask = await TaskService.AddTask(NewTask);
        NewTask = new TaskDto();
        await LoadCurrentPageTasks();
    }

    private async Task DeleteTask(TaskDto task)
    {
        Console.WriteLine($"Delete task: {task.Id}");
        await TaskService.DeleteTask(task.Id);
        await LoadCurrentPageTasks();
    }

    private async Task UpdateTask(TaskDto task)
    {
        TaskDto updated = await TaskService.UpdateTask(task);
        await LoadCurrentPageTasks();
    }

    private async Task OnPageChange(int page)
    {
        _currentPage = page;
        await LoadCurrentPageTasks();
    }
}