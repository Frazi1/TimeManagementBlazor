@using System
@using System.Threading.Tasks
@using Domain
@inherits Microsoft.AspNetCore.Components.OwningComponentBase

<h1>My tasks</h1>
<div>
    <div>
        <input type="text" @bind="@_newTask.Name"/>
        <button @onclick="AddTask">Add Task</button>
    </div>
    @if (_allTasks == null)
    {
        <span>Loading...</span>
    }
    else
    {
        <table>
            <thead>
            <tr>
                <th @onclick="(async () => await SetSortingBy(nameof(TaskDto.Name)))">
                    Task <span class="@(GetHeaderClass(nameof(TaskDto.Name)))"></span>
                </th>
                <th @onclick="(async () => await SetSortingBy(nameof(TaskDto.TimeSpent)))">
                    Time spent <span class="@(GetHeaderClass(nameof(TaskDto.TimeSpent)))"></span>
                </th>
                <th @onclick="(async () => await SetSortingBy(nameof(TaskDto.IsCompleted)))">
                    Completed <span class="@(GetHeaderClass(nameof(TaskDto.IsCompleted)))"></span>
                </th>
            </tr>
            </thead>
            <tbody>
            @foreach (var task in _allTasks.Items)
            {
                <tr>
                    <td>@task.Name</td>
                    <td>@task.TimeSpent</td>
                    <td>
                        <input type="checkbox" @bind=task.IsCompleted/>
                    </td>
                    <td>
                        <button @onclick="(async () => await UpdateTask(task))">Save</button>
                        <button @onclick="(async () => await DeleteTask(task))">Delete</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
        <Pager Count="@_allTasks.AllItemsCount" PageSize="@_pageSize"
               OnPageChange="(async page => await OnPageChange(page))"
               OnPageSizeChange="(async size => await OnPageSizeChange(size))"/>
    }
</div>

@code
{
    private TaskDto _newTask = new TaskDto();
    private PagedList<TaskDto> _allTasks;
    private int _currentPage = 1;
    private int _pageSize = 5;
    private PropertySorting _sorting;

    private ITaskService TaskService => (ITaskService) ScopedServices.GetService(typeof(ITaskService));

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentPageTasks();
    }

    private string GetHeaderClass(string headerPropertyName)
    {
        if (_sorting == null || _sorting.PropertyName != headerPropertyName) return "";
        if (_sorting.IsAscending) return "oi oi-arrow-top";
        return "oi oi-arrow-bottom";
    }

    private Filter CreateFilter() => new Filter(
        (_currentPage - 1) * _pageSize,
        _pageSize,
        _sorting != null ? new[] {_sorting} : null
        );

    private async Task LoadCurrentPageTasks()
    {
        _allTasks = await TaskService.GetTasksAsync(CreateFilter());
        StateHasChanged();
    }

    private async Task AddTask()
    {
        _newTask.TimeSpent = TimeSpan.FromHours(new Random().Next(1, 5));
        var createdTask = await TaskService.AddTaskAsync(_newTask);
        _newTask = new TaskDto();
        await LoadCurrentPageTasks();
    }

    private async Task DeleteTask(TaskDto task)
    {
        Console.WriteLine($"Delete task: {task.Id}");
        await TaskService.DeleteTaskAsync(task.Id);
        await LoadCurrentPageTasks();
    }

    private async Task UpdateTask(TaskDto task)
    {
        TaskDto updated = await TaskService.UpdateTaskAsync(task);
        await LoadCurrentPageTasks();
    }

    private async Task OnPageChange(int page)
    {
        _currentPage = page;
        await LoadCurrentPageTasks();
    }

    private async Task OnPageSizeChange(int size)
    {
        _pageSize = size;
        await LoadCurrentPageTasks();
    }

    private async Task SetSortingBy(string propertyName)
    {
        if (_sorting == null || _sorting.PropertyName != propertyName)
        {
            _sorting = new PropertySorting(propertyName, true);
        }
        else if (_sorting != null && _sorting.PropertyName == propertyName)
        {
            if (_sorting.IsAscending) _sorting = new PropertySorting(propertyName, false);
            else _sorting = null;
        }
        await LoadCurrentPageTasks();
    }
}